var IbusInterface = require('ibus').IbusInterface;
var IbusDevices = require('ibus').IbusDevices;
var baasic = require('./baasic');

// config
var device = '/dev/ttyUSB0';
 
// setup interface
var ibusInterface = new IbusInterface(device);
 
var evEmitter;

// cleanup
process.on('SIGINT', onSignalInt);
 
function onSignalInt() {
    ibusInterface.shutdown(function() {
        process.exit();
    });
}

// events
ibusInterface.on('data', onIbusData);
 
function onIbusData(data) {
	var dt = new Date();
	var msg = dt.toUTCString() + '\t' + 
			'[bus]' + ' ' + 
			padLeft(data.src, 2) + ' ' + 
			padLeft(data.len.toString(16), 2) + ' ' + 
			padLeft(data.dst, 2) + ' ' + 
			toHexString(data.msg) + '\t' + '[' + data.msg.toString('ascii') + ']' + '\t' + 
			padLeft(data.crc.toString(16), 2);

	//Log message
	console.log(msg);

	evEmitter.emit('busmessage', msg);

	switch (data.src) {
		case '0': // from GM
			if(data.dst = 'bf') {// to Global
				parseGMMessage(data.msg);
			}
			break;
		case '80': // from IKE
			parseIKEMessage(data.msg);
			break;
		case 'd0': // from LCM
			parseLCMMessage(data.msg);
			break;
		}
}

//emits an array of statuses
function emitStatus(k, v) {
	var d = new Date();
	var result={};
	result[k]=v;
	evEmitter.emit('status update', result);
	baasic.emitBaasic(k, v);
}

function parseGMMessage(msg){
	var response={};
	switch (msg[0]) {
		case 0x7A:
		var bitCode = Buff2Bin2(msg);
		//console.log('GM: ', bitCode.join(''));
		response['interior_light'] = ((bitCode[0][1]==1) ? true : false);
		response['lock_locked'] = ((bitCode[0][2]==1) ? true : false);
		response['lock_unlocked'] = ((bitCode[0][3]==1) ? true : false);
		response['rr_door'] = ((bitCode[0][4]==1) ? 'open' : 'closed');
		response['lr_door'] = ((bitCode[0][5]==1) ? 'open' : 'closed');
		response['rf_door'] = ((bitCode[0][6]==1) ? 'open' : 'closed');
		response['lf_door'] = ((bitCode[0][7]==1) ? 'open' : 'closed');

		response['hood'] = ((bitCode[1][1]==1) ? 'open' : 'closed');
		response['trunk'] = ((bitCode[1][2]==1) ? 'open' : 'closed');
		response['sunroof'] = ((bitCode[1][3]==1) ? 'open' : 'closed');
		response['rr_wnd'] = ((bitCode[1][4]==1) ? 'open' : 'closed');
		response['lr_wnd'] = ((bitCode[1][5]==1) ? 'open' : 'closed');
		response['rf_wnd'] = ((bitCode[1][6]==1) ? 'open' : 'closed');
		response['lf_wnd'] = ((bitCode[1][7]==1) ? 'open' : 'closed');
		emitStatus('doors_windows', response);
		break;
	}
}

function parseIKEMessage(msg){
	var response = {};
	switch (msg[0]) {
			case 0x11: // ignition key status
				switch (msg[1]) {
					case 0x00:  // off
					response['ignition']='off';
					break;
					case 0x01:  // pos1
					response['ignition']='pos1';
					break;
					case 0x03:  // pos2
					response['ignition']='pos2';
					break;
					case 0x07:  // pos3
					response['ignition']='pos3';
					break;
					default: // unknown
					response['ignition']='na';
					break;
				}
				break;
			case 0x17: //mileage km - total distance
				var fld=(padLeft(msg[3].toString(16),2)+padLeft(msg[2].toString(16),2)+padLeft(msg[1].toString(16),2)).split('');
				var mlg=0;
				for (var i = 0; i < fld.length; i++) {
					mlg=mlg+parseInt(fld[i],16)*Math.pow(16,5-i);
				}
				response['total']= mlg.toFixed(0);
				break;
			case 0x18: //speed and rpm
				response['speed']=parseFloat(msg[1]*2).toFixed(0);
				response['rpm']= parseFloat(msg[2]*100).toFixed(0);
				break;
			case 0x19: //temperatures
				response['tempoutside']=parseFloat(msg[1]).toFixed(0); 
				response['tempcoolant']=parseFloat(msg[2]).toFixed(0);
				break;
			case 0x24: //obc
				switch(msg[1]) {
					case 0x06: //range left
					response['rangeleft']=(Buffer.from([msg[3], msg[4], msg[5], msg[6]])).toString().trim();
					break;
					case 0x0A: //average speed
					response['avgspeed']=
						parseFloat(
							Buffer.from([msg[3], msg[4], msg[5], msg[6]]).toString().trim().toLowerCase()
							).toFixed(0);
					break;
				}
				break;
		}
		if(response!=={}){
			emitStatus('favorite', response);
		}
}

function parseLCMMessage(msg){
	var response = {};
	switch (msg[0]) {
		case 0x5B:
		//lights status
		var bitCode = Buff2Bin2(msg);
		//console.log('LCM: ', bitCode.join(''));
		response['indicator_fast_blink'] = ((bitCode[0][0]==1) ? 'on' : 'off' );
		response['indicator_right'] = ((bitCode[0][1]==1) ? 'on' : 'off' );
		response['indicator_left'] = ((bitCode[0][2]==1) ? 'on' : 'off' );
		response['fog_rear'] = ((bitCode[0][3]==1) ? 'on' : 'off' );
		response['fog_front'] = ((bitCode[0][4]==1) ? 'on' : 'off' );
		response['high_beam'] = ((bitCode[0][5]==1) ? 'on' : 'off' );
		response['low_beam'] = ((bitCode[0][6]==1) ? 'on' : 'off' );
		response['park'] = ((bitCode[0][7]==1) ? 'on' : 'off' );

		response['fail_indicator_right'] = ((bitCode[1][1]==1) ? 'on' : 'off' );
		response['fail_indicator_left'] = ((bitCode[1][2]==1) ? 'on' : 'off' );
		response['fail_fog_rear'] = ((bitCode[1][3]==1) ? 'on' : 'off' );
		response['fail_fog_front'] = ((bitCode[1][4]==1) ? 'on' : 'off' );
		response['fail_high_beam'] = ((bitCode[1][5]==1) ? 'on' : 'off' );
		response['fail_low_beam'] = ((bitCode[1][6]==1) ? 'on' : 'off' );
		response['fail_park'] = ((bitCode[1][7]==1) ? 'on' : 'off' );

		response['rear'] = ((bitCode[2][4]==1) ? 'on' : 'off' );
		response['indicator_sync'] = ((bitCode[2][5]==1) ? 'on' : 'off' );
		response['brake'] = ((bitCode[2][6]==1) ? 'on' : 'off' );

		response['rear_left'] = ((bitCode[3][4]==1) ? 'on' : 'off' );
		response['rear_right'] = ((bitCode[3][5]==1) ? 'on' : 'off' );
		response['brake_left'] = ((bitCode[3][6]==1) ? 'on' : 'off' );
		response['brake_right'] = ((bitCode[3][7]==1) ? 'on' : 'off' );
		emitStatus('lights', response);
		break;
	}
}

function padLeft(s, n){
	return String("0".repeat(n+1) + s).slice(-n);
}

function toHexString(bArray) {
	var result=[];
	for (var i = 0; i < bArray.length; i++) {
		result.push(padLeft(bArray[i].toString(16), 2));
	}
	return result.join(' ');
}

function Buff2Bin(bArray) {
	var r = [];
	for (var i = 0; i < bArray.length; i++) {
		r.push(padLeft(bArray[i].toString(2), 8));
	}
	return Array.from(r.join(''));
}

function Buff2Bin2(bArray) {
	//from second element on in the array
	var r = [];
	for (var i = 1; i < bArray.length; i++) {
		r.push(padLeft(bArray[i].toString(2), 8));
	}
	return r;
}

function sendBusMessage(msgstr){
		//msgstring - hex string without length and checksum
		console.log('sending: ', msgstr);
		var msg = msgstr.split(' ');
		var newMsg = {
			src: parseInt(msg[0], 16),
			dst: parseInt(msg[1], 16),
			msg: []
		};
		msg.shift();
		msg.shift();
		for (var i = 0; i < msg.length; i++) {
			msg[i] = parseInt(msg[i], 16);
		}
		newMsg.msg = new Buffer(msg);

		ibusInterface.sendMessage(newMsg);	
}

module.exports = {

	init: function(eventemitter, baasicapp) {
		evEmitter = eventemitter;
	    ibusInterface.startup();
		baasic.init(baasicapp);
	},

	sendMessage: function(msgstring){
		sendBusMessage(msgstring);
	}
};